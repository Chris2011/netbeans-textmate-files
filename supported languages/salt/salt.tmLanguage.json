{
    "scopeName": "source.salt",
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#expression"
        },
        {
            "include": "#decl-type"
        },
        {
            "include": "#decl-term"
        },
        {
            "include": "#decl-test"
        },
        {
            "include": "#decl-proc"
        },
        {
            "include": "#decl-emit"
        }
    ],
    "repository": {
        "comment": {
            "patterns": [
                {
                    "include": "#comment-line"
                }
            ]
        },
        "comment-line": {
            "match": "(--).*$\n?",
            "name": "comment.line.salt"
        },
        "decl-type": {
            "match": "^type",
            "name": "keyword.control.declaration.type.salt"
        },
        "decl-term": {
            "match": "^term",
            "name": "keyword.control.declaration.term.salt"
        },
        "decl-proc": {
            "match": "^proc",
            "name": "keyword.control.declaration.proc.salt"
        },
        "decl-test": {
            "match": "^(watch\\s+)?(test)\\s+(kind|type|eval|eval'type|eval'term|assert|exec|emit)\\b",
            "captures": {
                "1": {
                    "name": "keyword.control.declaration.watch.salt"
                },
                "2": {
                    "name": "keyword.control.declaration.test.salt"
                },
                "3": {
                    "name": "keyword.control.declaration.test.mode.salt"
                }
            }
        },
        "decl-emit": {
            "match": "^emit",
            "name": "keyword.control.declaration.emit.salt"
        },
        "expression": {
            "patterns": [
                {
                    "include": "#keyword-shared"
                },
                {
                    "include": "#keyword-type"
                },
                {
                    "include": "#keyword-term"
                },
                {
                    "include": "#prim-operator"
                },
                {
                    "include": "#prim-constructor"
                },
                {
                    "include": "#prim-numeric"
                },
                {
                    "include": "#paren-round-expression"
                },
                {
                    "include": "#paren-square-expression"
                },
                {
                    "include": "#paren-brace-expression"
                }
            ]
        },
        "keyword-shared": {
            "match": "\\b(fun)\\b",
            "name": "keyword.control.expression.shared.salt"
        },
        "keyword-type": {
            "match": "\\b(forall|exists)\\b",
            "name": "keyword.control.expression.type.salt"
        },
        "keyword-term": {
            "match": "\\b(the|let|rec|in|do|if|then|else|case|of|box|run|proc|yield|call|with|seq|end|enter|leave|launch|return|cell|update|when|whens|done|match|loop|break|continue|while|bloc)\\b",
            "name": "keyword.control.expression.term.salt"
        },
        "prim-operator": {
            "match": "\\#[a-z][a-zA-Z0-9']*",
            "name": "constant.primitive.operator.salt"
        },
        "prim-constructor": {
            "match": "\\#[A-Z][a-zA-Z0-9']*",
            "name": "constant.primitive.constructor.salt"
        },
        "prim-numeric": {
            "match": "\\b[0-9]+\\b",
            "name": "constant.numeric.salt"
        },
        "paren-round-expression": {
            "begin": "\\(",
            "end": "\\)",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.paren.round.open.salt"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.paren.round.close.salt"
                }
            },
            "name": "expression.group.round.salt",
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "paren-square-expression": {
            "begin": "\\[",
            "end": "\\]",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.paren.square.open.salt"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.paren.square.close.salt"
                }
            },
            "name": "expression.group.square.salt",
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "paren-brace-expression": {
            "begin": "\\{",
            "end": "\\}",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.paren.brace.open.salt"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.paren.brace.close.salt"
                }
            },
            "name": "expression.group.brace.salt",
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        }
    }
}
